// <auto-generated />
using System;
using M3.Net.Modules.Transcripts.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace M3.Net.Modules.Transcripts.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TranscriptsDbContext))]
    partial class TranscriptsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("transcripts")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("M3.Net.Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "transcripts");
                });

            modelBuilder.Entity("M3.Net.Common.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("InboxMessageId", "Name")
                        .HasName("pk_inbox_message_consumers");

                    b.ToTable("inbox_message_consumers", "transcripts");
                });

            modelBuilder.Entity("M3.Net.Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "transcripts");
                });

            modelBuilder.Entity("M3.Net.Common.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("OutboxMessageId", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("outbox_message_consumers", "transcripts");
                });

            modelBuilder.Entity("M3.Net.Modules.Transcripts.Domain.Transcripts.ProcessingJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("error_details");

                    b.Property<DateTime?>("LastProgressUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_progress_update");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("progress_percentage");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TranscriptRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("transcript_request_id");

                    b.HasKey("Id")
                        .HasName("pk_processing_jobs");

                    b.HasIndex("TranscriptRequestId")
                        .HasDatabaseName("ix_processing_jobs_transcript_request_id");

                    b.ToTable("processing_jobs", "transcripts");
                });

            modelBuilder.Entity("M3.Net.Modules.Transcripts.Domain.Transcripts.Transcript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("confidence_score");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("language");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("WordCount")
                        .HasColumnType("integer")
                        .HasColumnName("word_count");

                    b.Property<string>("YouTubeUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("you_tube_url");

                    b.HasKey("Id")
                        .HasName("pk_transcripts");

                    b.HasIndex("RequestId")
                        .HasDatabaseName("ix_transcripts_request_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transcripts_user_id");

                    b.ToTable("transcripts", "transcripts");
                });

            modelBuilder.Entity("M3.Net.Modules.Transcripts.Domain.Transcripts.TranscriptDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_count");

                    b.Property<string>("AccessToken")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("access_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("delivery_method");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime?>("FirstAccessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_accessed_at");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TranscriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("transcript_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_transcript_deliveries");

                    b.HasIndex("AccessToken")
                        .IsUnique()
                        .HasDatabaseName("ix_transcript_deliveries_access_token");

                    b.HasIndex("TranscriptId")
                        .HasDatabaseName("ix_transcript_deliveries_transcript_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transcript_deliveries_user_id");

                    b.ToTable("transcript_deliveries", "transcripts");
                });

            modelBuilder.Entity("M3.Net.Modules.Transcripts.Domain.Transcripts.TranscriptRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("rejection_reason");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validated_at");

                    b.Property<string>("YouTubeUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("you_tube_url");

                    b.HasKey("Id")
                        .HasName("pk_transcript_requests");

                    b.ToTable("transcript_requests", "transcripts");
                });
#pragma warning restore 612, 618
        }
    }
}
